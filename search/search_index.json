{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#wat-iz-dis","title":"Wat iz dis?","text":"<p>Just a little site to hopefully help other people with various things. I'm not a professional programmer or anything, I just like to tinker around.</p> <p>If you find any mistakes/improvements regarding text or content, create a git issue here -&gt; click me</p>"},{"location":"#what-can-i-find-here","title":"What can I find here?","text":"<p>All sorts of tips little tools and howto's for technical stuff. Just look around in the tabs above and on the left.</p>"},{"location":"Davinci%20Resolve/ES2DR/","title":"ES2DR - Epidemic Sound to DaVinci Resolve","text":""},{"location":"Davinci%20Resolve/ES2DR/#what-is-es2dr","title":"What is ES2DR?","text":"<p>Its a simple tool (Direfox Extension + Python middle man) that allows you to import Epidemic Sound tracks direclty into DaVinci Resolve + saves them into a folder of your choice.</p> <p>Info</p> <p>This is heavily work in progress, so expect bugs and issues and missing features.</p>"},{"location":"Davinci%20Resolve/ES2DR/#how-to-install-it","title":"How to install it?","text":"<ul> <li>Go to the release pager: releases page</li> <li>Click on the .xdi file<ul> <li>Firefox will promt you to install the extension</li> </ul> </li> </ul> <p>Now download the <code>server.zip</code> from the same page and extract it somewhere.</p> <p>Info</p> <p>Required is Python3 and the <code>websockets</code> module. You can install it with <code>pip install websockets</code>.</p> <p>Before running the server, you need to edit the <code>ws.py</code> file. (Will be changed in the future). Open the file and change the <code>path</code> variable to the path of the desired folder where the tracks should be saved. (Like an audio database - the files will remain after closing the script/davinci/project)</p> <p>Now you can run the <code>ws.py</code> file. Its still a lillte buggy, maybe you have to go to the Firefox extention settings and restart it, to make it connect. (Or click a few times the extention icon to start downloading, it should try to reconnect and start downloading/importing) If you are on windows the start.bat will start the server. You cann create a shortcut to it and put it on your desktop.</p>"},{"location":"Davinci%20Resolve/ES2DR/#how-to-use-it","title":"How to use it?","text":"<p>Go to any Track page or playlist/album page on Epidemic Sound and click the EStDR icon in your browser. IT will download all Tracks into the folder and imports them into the mediapool.</p> <p>Info</p> <p>You can also rightlick a track link (the name), to only download that one.</p>"},{"location":"Davinci%20Resolve/ES2DR/#planned-features","title":"Planned features","text":"<ul> <li> some sort settings - ui? - in the browser/external window?</li> <li> directly import into timeline?</li> <li> Better docs -&gt; short gif?</li> <li> Better error handling</li> <li> Auto updates</li> </ul>"},{"location":"Davinci%20Resolve/plugins/","title":"Plugins","text":"<p>All plugins are available for free, and unlocked - means you can directly edit the effect/generator inside fusion.</p>"},{"location":"Davinci%20Resolve/plugins/#counter","title":"Counter","text":"<p> Basic counter with milliseconds/frames and offset. Supported formats:</p> <ul> <li>00:00:00.000 (HH:MM:SS:ms)</li> <li>00:00:00:00 (HH:MM:SS:ff)</li> <li>00:00:00 (HH:MM:SS)</li> <li>00:00 (MM:SS)</li> <li>00 (SS)</li> </ul> <p>Additionally, you can set the start offset, framerate will be automatically detected (CompFramerate), and it can strip leading zeros. For more Advanced Text+ options, just open it in fusion, and edit the text+ node.</p> <p>Core logic is written in LUA (Text+ Textfield expression) incase you want to edit the format or see how it works</p> <p>DCounter.drfx</p>"},{"location":"Davinci%20Resolve/plugins/#wip","title":"WIP","text":"<p>More plugins will be added soon .</p>"},{"location":"Guides/irl/","title":"IRL streaming (OBS)","text":"<p>IRL - In REAL Life streaming has some difficulties. You have limited processing power, limited upload speed and limited battery life. Probably also an mobile data cap as well as signal loss. How can you stream from your phone without having to worry about all that stuff? (at least not as much)</p>"},{"location":"Guides/irl/#viewer-experience","title":"Viewer experience","text":"<p>The worst that can happen to your broadcast is a complete disconnect. The viewer will see a black screen and will probably leave. So we need to make sure that this doesn't happen. We can archive this for example via a stationary PC at home, that is always on and has a stable upload speed (10MiB/s). We just have to somehow get the video from our phone to the PC. This is where SRT comes in.</p> <p>SRT is a protocol specifically designed for low latency video streaming. It can handle packet loss and retransmit lost packets. It also has a built in encryption and authentication. It is also open source and free to use.</p> <p>Note</p> <p>RTMP is the protocol used by twitch, youtube etc. It is not designed for packet loss. Thats the reason why streaming directly to twitch/youtube from your phone is not a good idea. It probably works in very good conditions, but you can't rely on that. Especially on conventions where the internet is overloaded and the signal is bad.</p>"},{"location":"Guides/irl/#required-hardware","title":"Required Hardware","text":"<ul> <li>A phone with a (good) camera, build in mic, or external mic(aux/bluetooth). (USB cams are experimental on Android, speaking of DLSR + Camlink or simliar)</li> <li>A stationary PC at home with enough upload and download speed to stream. (any semi modern laptop will do probably)</li> <li>A bit of time to set it up.</li> </ul>"},{"location":"Guides/irl/#lets-get-started","title":"Lets get started","text":"<ol> <li>Download OBS for your PC install it, set it up for streaming to your favorite platform.</li> <li> <p>Install the Websocket plugin for OBS. (Newer versions of OBS have it built in)</p> <p>Configure a password/user as well as a random port (everything in the 4 and 5 digits should be free).</p> </li> <li> <p>Add a media source to your scene (name it whatever you want)</p> <p>Input following URL: <code>srt://0.0.0.0:PORT?mode=listener&amp;timeout=5000000</code></p> <p>I've used Port 22222 in this example   </p> </li> <li> <p>Download \"Larix Broadcaster\" for your phone.</p> </li> <li> <p>Add a new server in the settings under connections.</p> </li> <li> <p>Name can be anything, URL hast to be srt://IPOFYOURPC:PORT (PORT=22222 in this example)</p> </li> <li> <p>Delay can be lower than 2000ms, but mobile networks aren't that reliable, so I'd recommend 2000ms.</p> </li> <li> <p>Adjust the video settings to your liking</p> </li> <li> <p>1080p 30fps is good for IRL, variable bitrate of 3000kb/s, (Format HEVC if available)</p> </li> <li> <p>Way at the bottom of the video settings you can enable \"Adaptive bitrate streaming\" and set it to \"Ladder ascend\"</p> <p>This will automatically lower your video bitrate if your connection is bad, to still allow retransfering lost packets. The Bitrate will go up again as soon as the available bandwidth increases.</p> </li> <li> <p>Setup up mic settings to your liking</p> </li> <li> <p>Go back to the main screen and press the \"Shutter\" button to start streaming.</p> <p>After a few seconds the video feed should be visible in your OBS with ~2seconds delay.</p> </li> </ol>"},{"location":"Guides/irl/#making-it-work-from-outside-your-home","title":"Making it work from outside your home","text":"<ol> <li>Setup port forwarding on your router to forward the port you've chosen above to your PC running OBS.</li> <li>Also make the port open for your OBS websocket (You can use for example OBS Blade on your phone to control OBS remotely, to start/stop streaming, change scenes etc.)</li> </ol> <p>Danger</p> <p>OPENING PORTS IS A POTENTIAL SECURITY RISK, MAKE SURE YOU KNOW WHAT YOU ARE DOING AND THAT YOU HAVE A SECURE PASSWORD FOR YOUR WEBSOCKET. ONLY LEAVE IT OPEN AS LONG AS YOU NEED IT. DON'T TELL ANYONE THE PORT NUMBERS, JUST TO BE SAFE. ANYONE WITH THE PORT AND PASSWORD OF YOUR WEBSOCKET CAN START STREAMING. YOU HAVE BEEN WARNED.</p> <ol> <li>Setup a Dynamic DNS service, so you have a static URL to connect to.</li> <li>I use noip.com - its free and easy to use.</li> <li>Create an account, add a new Domain and follow the instructions.</li> <li>Download the client and install it on your PC. (You can also set up the service on your router if its supported)</li> <li> <p>Select your configured domain in the client</p> <p>Now the Dynamic DNS service Domain should always resolve in your public home address</p> </li> <li> <p>Adjust the IP in your Larix Broadcaster APP (Server settings) to your created DOMAIN.</p> </li> </ol> <p>All done, you should now be able to stream from anywhere in the world.</p>"},{"location":"Guides/irl/#cool-stuff","title":"Cool stuff","text":"<ul> <li>auto scene switcher, on bad internet / connection loss / ending / starting etc: Loopy SRT Stats Monitor</li> <li>Just watch his tutorial its fairly easy to follow</li> <li>you can minimize the Larix app to open a chat app on the same device (on android you can multi window the apps or use a floating window app)</li> </ul> Note <p>To still read the chat, you can create an overlay inside the Larix app, and set it to preview only. As url use the direct one from twitch popout chat, or JChat. Additionally you have to enable stream and record mirrored video for the selfie cam, so it doesn't flip the overlay. (thats an bug???) On android you can enable \"keep streaming in background\" in the settings, so you can use even another chat app or whatever, sorry iphone users.</p>"},{"location":"Guides/irl/#pros-of-this-setup-instead-of-streaming-directly-from-your-phone","title":"Pros of this setup instead of streaming directly from your phone","text":"<ul> <li>your phone has only to encode your camera and audio, not all overlays etc -&gt; longer battery life</li> <li>you can just use all your existing overlays (setup in OBS)</li> <li>If your phone disconnects for longer than 2 seconds, the stream keeps running (with loopy you can automatically switch to a different scene, till you reconnected) - chat can meme in the meantime you reconnect and hopefully nobody leaves</li> </ul> <p>Only contra: your pc has to be on during that time.</p> <p>-&gt; Enjoy streaming from where ever you are without worring about disconnects etc</p> <p>Want to know more coll stuff related? https://obsproject.com/wiki/Streaming-With-SRT-Or-RIST-Protocols</p>"},{"location":"Other/","title":"Other stuff","text":"<p>Very random stuff that doesn't fit anywhere else.</p>"},{"location":"Other/AudioSlicer/","title":"AudioSlicer (Editor) for ai-voice-cloning by mrq","text":""},{"location":"Other/AudioSlicer/#requirements-just-use-the-same-venv-as-for-the-ui","title":"Requirements (just use the same venv as for the ui)","text":"<ul> <li>ffmpeg (ffprobe)</li> <li>PyQt6</li> </ul> <p>Clone this repo to \"modules\". Dschogo/AudioSlicer</p> <p>To install the requirements, activate your venv (<code>venv\\Scripts\\activate</code> on Windows) and run <code>pip install ffmpeg-python PyQt6</code>.</p>"},{"location":"Other/AudioSlicer/#usage","title":"Usage","text":"<p>Run main.py (with the activa venv)</p> <p>Select either a generated audio_list.json (by this tool to continue working on the same project) or a generated whisper.json (by the ui with whisperx) in the traning folder of the voice.</p> <p>Note: Its is advices to give a -1 seconds trim offset in the start, whisperx cuts often to late, and you can cut it later with this tool.</p>"},{"location":"Other/AudioSlicer/#buttons","title":"Buttons","text":"<ul> <li>prev / next (alt+left / alt+right): go to the previous / next audio file</li> <li>delete (alt+del): delete the current audio file (not really delete but flag as not to export for training)</li> <li>trim (alt+t): trim the current audio file (respecting the 2 fields above, cuts x seconds from start/end - floats are allowed), after cutting the length can be longer - ffprobe returns the actual new length</li> <li>save (ctrl+s): save the current progress to audio_list.json </li> <li>export : writes the train.txt and vaidation.txt (2% of the \"good\" samples taken)</li> </ul>"},{"location":"Other/AudioSlicer/#notes","title":"Notes","text":"<ul> <li>To add new audio files, just transcribe them via the UI and then select the <code>audio_list.json</code>, it will add the new files to the list (takes a bit) DONT SELECT THE WHISPER.JSON AGAIN, IT WILL OVERWRITE THE WHOLE LIST, AND THEREFORE YOUR PROGESS. Also make sure to chekc the <code>skip existing</code> in the webui, otherwise the trimmed audio files will be overwritten, and the trim is gone.</li> <li>The word quality is taken from whisperX, therefore its only an indicator nothing more.</li> </ul>"},{"location":"Other/WhatsappEfixFixer/","title":"Whatsapp Efix Fixer","text":""},{"location":"Other/WhatsappEfixFixer/#uhm-what-da-heck-is-that-even","title":"Uhm What da heck is that even?","text":"<p>Basically every file, has the creation date baked into the file itself. With this information a gallery for example can order Images based on \"taken\" dat, even if the file name has nothing to do with the date. Whatsapp-backups just backup the file WITHOUT the exif, why? I don't know, these few bytes wouldn't hurt anyone. Maybe you restored a Whatsapp-backup   one day, and noticed that all Images from Whatsapp got created today, and therefore the Gallery is totally fucked up. Luckily whatsapp names the images and videos based on the creation date, so we can just add the exif data back in, with a simple script.</p>"},{"location":"Other/WhatsappEfixFixer/#the-script","title":"The script","text":"<p>What does it do excactly? It goes through every image in the \"process_images\" folder, and adds the exif data back to it. If multiple files got the same date, an incrementing counter will be added to the filename. To use it, you can either map the working folder to the actual image/video/media folder on you connected phone, or copy the files onto the computer, and then run the script, and copy them back. That way you also have an backup of the original files incase something goes wrong. (The online Backup could become unusable, if it automatically backs up during the process)</p> whatsappexiffixer.py<pre><code>from datetime import datetime\nimport piexif\nimport os\nimport time\nerrors_count = 0\nerrors_names = []\nfolder = \"./process_images/\"\ndef get_datetime(filename):\ndate_str = filename.split(\"-\")[1]\nreturn datetime.strptime(date_str, \"%Y%m%d\")\ndef get_date(filename):\ndate_str = filename.split(\"-\")[1]\ndate_str2 = filename.split(\"-\")[2][4:6]\nif date_str2 == \"00\" or int(date_str2) &gt;= 24:\nreturn datetime.strptime(date_str, \"%Y%m%d\").strftime(\"%Y:%m:%d %H:%M:%S\")\nelse:\nreturn datetime.strptime(date_str + date_str2, \"%Y%m%d%H\").strftime(\"%Y:%m:%d %H:%M:%S\")\nallowedFileEndings = [\"mp4\", \"jpg\", \"3gp\", \"jpeg\"]\nfilenames = [fn for fn in os.listdir(folder) if fn.split(\".\")[-1] in allowedFileEndings]\nnum_files = len(filenames)\nprint(\"Number of files: {}\".format(num_files))\nfor i, filename in enumerate(filenames):\ntry:\nif filename.endswith(\"mp4\") or filename.endswith(\"3gp\"):\ndate = get_datetime(filename)\nmodTime = time.mktime(date.timetuple())\nos.utime(folder + filename, (modTime, modTime))\nelif filename.endswith(\"jpg\") or filename.endswith(\"jpeg\"):\nexif_dict = {\"Exif\": {piexif.ExifIFD.DateTimeOriginal: get_date(filename)}}\nexif_bytes = piexif.dump(exif_dict)\npiexif.insert(exif_bytes, folder + filename)\nnum_digits = len(str(num_files))\nprint(\n\"{num:{width}}/{max} - {filename}\".format(\nnum=i + 1, width=num_digits, max=num_files, filename=folder + filename\n)\n)\nexcept:\nerrors_count = errors_count + 1\nerrors_names.append(filename)\npass\nprint(\"\\nDone!\")\nprint(\"\\nErroes:\" + str(errors_count) + \"!\")\nprint(f\"\\n{errors_names}\")\n</code></pre> <p>Danger</p> <p>This script worked for me a few months ago, maybe stuff has changed since then. So as always, it comes as is and always read code you found online before you run it. Im not responsible for any damage this script might cause.</p>"}]}